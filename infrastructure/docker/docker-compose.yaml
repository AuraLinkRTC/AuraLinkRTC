version: '3.8'

services:
  # Redis for caching and real-time state
  redis:
    image: redis:7-alpine
    container_name: auralink-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # WebRTC Server (LiveKit-based)
  webrtc-server:
    build:
      context: ../../auralink-webrtc-server
      dockerfile: Dockerfile
    container_name: auralink-webrtc-server
    ports:
      - "7880:7880"
      - "7881:7881"
      - "50000:50000/udp"
    env_file:
      - ../../.env
    environment:
      - REDIS_HOST=redis:6379
      - ENVIRONMENT=development
    depends_on:
      - redis
    volumes:
      - ../../auralink-webrtc-server:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7880/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Core Service
  ai-core:
    build:
      context: ../../auralink-ai-core
      dockerfile: Dockerfile
    container_name: auralink-ai-core
    ports:
      - "8000:8000"
    env_file:
      - ../../.env
    environment:
      - AI_CORE_PORT=8000
      - REDIS_HOST=redis:6379
      - WEBRTC_SERVER_URL=http://webrtc-server:7880
      - ENVIRONMENT=development
    depends_on:
      - redis
    volumes:
      - ../../auralink-ai-core:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Service
  dashboard-service:
    build:
      context: ../../auralink-dashboard-service
      dockerfile: Dockerfile
    container_name: auralink-dashboard-service
    ports:
      - "8080:8080"
    env_file:
      - ../../.env
    environment:
      - DASHBOARD_SERVICE_PORT=8080
      - REDIS_HOST=redis:6379
      - WEBRTC_SERVER_URL=http://webrtc-server:7880
      - AI_CORE_URL=http://ai-core:8000
      - ENVIRONMENT=development
    depends_on:
      - redis
      - webrtc-server
      - ai-core
    volumes:
      - ../../auralink-dashboard-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: auralink-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yaml:/etc/prometheus/prometheus.yml
      - ../monitoring/alert-rules.yaml:/etc/prometheus/rules/alerts.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: auralink-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/auralink.json
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: auralink-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: auralink-network
