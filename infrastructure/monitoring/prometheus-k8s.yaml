# Prometheus Configuration for AuraLink - Kubernetes Service Discovery
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'auralink-production'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - auralink
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex: "9093"
          action: keep

# Load rules once and periodically evaluate them
rule_files:
  - "/etc/prometheus/rules/*.yml"
  - "/etc/prometheus/alert-rules.yaml"

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # ========================================================================
  # KUBERNETES SERVICE DISCOVERY
  # ========================================================================
  
  # Discover all pods in auralink namespace with Prometheus annotations
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - auralink
    
    relabel_configs:
      # Only scrape pods with prometheus.io/scrape=true annotation
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      
      # Use custom metrics path if specified
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      
      # Use custom port if specified
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      
      # Add pod metadata as labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      
      - source_labels: [__meta_kubernetes_pod_node_name]
        action: replace
        target_label: kubernetes_node

  # WebRTC Server monitoring (static + k8s)
  - job_name: 'auralink-webrtc-server'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - auralink
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        regex: auralink-webrtc-server
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: metrics
        action: keep
    metrics_path: '/metrics'

  # AI Core monitoring (static + k8s)
  - job_name: 'auralink-ai-core'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - auralink
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        regex: auralink-ai-core
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: http
        action: keep
    metrics_path: '/metrics'

  # Dashboard Service monitoring (static + k8s)
  - job_name: 'auralink-dashboard-service'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - auralink
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        regex: auralink-dashboard-service
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: http
        action: keep
    metrics_path: '/metrics'

  # Ingress/Egress monitoring
  - job_name: 'auralink-ingress-egress'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - auralink
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        regex: auralink-ingress-egress
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: metrics
        action: keep
    metrics_path: '/metrics'

  # Communication Service monitoring
  - job_name: 'auralink-communication-service'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - auralink
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        regex: auralink-communication-service
        action: keep
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        regex: metrics
        action: keep
    metrics_path: '/metrics'

  # ========================================================================
  # INFRASTRUCTURE MONITORING
  # ========================================================================

  # Node exporter for system metrics (Kubernetes nodes)
  - job_name: 'node-exporter'
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

  # Redis exporter
  - job_name: 'redis'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - auralink
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        regex: redis-exporter
        action: keep

  # PostgreSQL exporter
  - job_name: 'postgresql'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - auralink
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        regex: postgres-exporter
        action: keep

  # ========================================================================
  # STATIC CONFIGURATIONS (for development/docker-compose)
  # ========================================================================

  # Static WebRTC Server (development)
  - job_name: 'webrtc-static'
    static_configs:
      - targets: ['auralink-webrtc-server:7880']
    metrics_path: '/metrics'

  # Static AI Core (development)
  - job_name: 'ai-core-static'
    static_configs:
      - targets: ['ai-core:8000']
    metrics_path: '/metrics'

  # Static Dashboard (development)
  - job_name: 'dashboard-static'
    static_configs:
      - targets: ['dashboard-service:8080']
    metrics_path: '/metrics'

  # Static Redis (development)
  - job_name: 'redis-static'
    static_configs:
      - targets: ['redis-exporter:9121']

  # Static PostgreSQL (development)
  - job_name: 'postgres-static'
    static_configs:
      - targets: ['postgres-exporter:9187']

# Remote write (optional - for long-term storage)
# remote_write:
#   - url: "https://prometheus-remote-write-endpoint/api/v1/write"
#     basic_auth:
#       username: "user"
#       password: "password"

# Remote read (optional - for querying historical data)
# remote_read:
#   - url: "https://prometheus-remote-read-endpoint/api/v1/read"
#     basic_auth:
#       username: "user"
#       password: "password"
