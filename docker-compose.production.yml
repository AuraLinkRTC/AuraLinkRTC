version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: auralink-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  ai-core:
    build:
      context: ./auralink-ai-core
      dockerfile: Dockerfile
    container_name: auralink-ai-core
    ports:
      - "8000:8000"
      - "50051:50051"  # gRPC port for AIC
    environment:
      - ENVIRONMENT=production
      - SERVICE_NAME=auralink-ai-core
      - AI_CORE_PORT=8000
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - REDIS_HOST=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY:-}
      - LOG_LEVEL=INFO
      - ENABLE_AIC=true
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./logs/ai-core:/app/logs

  dashboard-service:
    build:
      context: ./auralink-dashboard-service
      dockerfile: Dockerfile
    container_name: auralink-dashboard-service
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - SERVICE_NAME=auralink-dashboard-service
      - DASHBOARD_SERVICE_PORT=8080
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - REDIS_HOST=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_EXPIRATION_HOURS=24
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./logs/dashboard:/app/logs

  webrtc-server:
    build:
      context: ./auralink-webrtc-server
      dockerfile: Dockerfile
    container_name: auralink-webrtc-server
    ports:
      - "7880:7880"
      - "7881:7881"  # WebSocket
    environment:
      - ENVIRONMENT=production
      - SERVICE_NAME=auralink-webrtc-server
      - WEBRTC_SERVER_PORT=7880
      - LIVEKIT_URL=${LIVEKIT_URL:-}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET:-}
      - AIC_GRPC_URL=ai-core:50051
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      - redis
      - ai-core
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7880/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./logs/webrtc:/app/logs

  prometheus:
    image: prom/prometheus:latest
    container_name: auralink-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: auralink-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: auralink-network
    driver: bridge
