---
apiVersion: v1
kind: Service
metadata:
  name: auralink-ingress-egress
  namespace: auralink
  labels:
    app: ingress-egress
    component: media
spec:
  type: ClusterIP
  selector:
    app: ingress-egress
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: auralink-ingress-egress-udp
  namespace: auralink
  labels:
    app: ingress-egress
    component: media
spec:
  type: LoadBalancer
  selector:
    app: ingress-egress
  ports:
  - name: rtp
    port: 10000
    targetPort: rtp
    protocol: UDP

---
apiVersion: v1
kind: Service
metadata:
  name: auralink-ingress-egress-headless
  namespace: auralink
  labels:
    app: ingress-egress
    component: media
spec:
  clusterIP: None
  selector:
    app: ingress-egress
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auralink-ingress-egress
  namespace: auralink

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: auralink-config
  namespace: auralink
data:
  region: "us-west-2"
  environment: "production"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-egress-config
  namespace: auralink
data:
  auralink.conf: |
    # AuraLink Ingress-Egress Service Configuration
    # This file is mounted as ConfigMap in Kubernetes
    
    auralink {
      service {
        name = "ingress-egress"
        region = ${?AURALINK_REGION}
        environment = ${?AURALINK_ENV}
        version = "1.0.0"
      }
      
      features {
        enable_aic = ${?ENABLE_AIC}
        enable_sip = ${?ENABLE_SIP}
        enable_rtmp = ${?ENABLE_RTMP}
        enable_recording = ${?ENABLE_RECORDING}
        enable_mesh = ${?ENABLE_MESH}
        enable_auraid = ${?ENABLE_AURAID}
      }
      
      metrics {
        enabled = true
        prometheus {
          port = 9090
        }
      }
    }

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auralink-ingress-egress-hpa
  namespace: auralink
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auralink-ingress-egress
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: active_conferences
      target:
        type: AverageValue
        averageValue: "50"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: auralink-ingress-egress-pdb
  namespace: auralink
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ingress-egress

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: auralink-ingress-egress
  namespace: auralink
  labels:
    app: ingress-egress
spec:
  selector:
    matchLabels:
      app: ingress-egress
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
