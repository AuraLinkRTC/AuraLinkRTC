# AuraLink Ingress-Egress Service Configuration
# This configuration file extends Jitsi Videobridge with AuraLink-specific integrations

auralink {
  # Service identity and metadata
  service {
    name = "ingress-egress"
    name = ${?AURALINK_SERVICE_NAME}
    
    region = "us-west-2"
    region = ${?AURALINK_REGION}
    
    environment = "production"
    environment = ${?AURALINK_ENV}
    
    version = "1.0.0"
    
    # Unique bridge identifier
    bridge_id = ${?BRIDGE_ID}
  }

  # Feature flags for conditional functionality
  features {
    # Enable AIC Protocol for AI-driven compression
    enable_aic = true
    enable_aic = ${?ENABLE_AIC}
    
    # Enable SIP gateway for telephony integration
    enable_sip = true
    enable_sip = ${?ENABLE_SIP}
    
    # Enable RTMP bridge for streaming platforms
    enable_rtmp = true
    enable_rtmp = ${?ENABLE_RTMP}
    
    # Enable recording service
    enable_recording = true
    enable_recording = ${?ENABLE_RECORDING}
    
    # Enable mesh routing optimization
    enable_mesh = false
    enable_mesh = ${?ENABLE_MESH}
    
    # Enable AuraID universal identity resolution
    enable_auraid = true
    enable_auraid = ${?ENABLE_AURAID}
    
    # Enable trust system integration
    enable_trust = true
    enable_trust = ${?ENABLE_TRUST}
    
    # Enable enterprise SSO
    enable_sso = false
    enable_sso = ${?ENABLE_SSO}
  }

  # Dashboard Service integration
  dashboard {
    # Dashboard Service API endpoint
    url = "http://auralink-dashboard:8080"
    url = ${?DASHBOARD_SERVICE_URL}
    
    # API authentication key
    api_key = ${?DASHBOARD_API_KEY}
    
    # Request timeout
    timeout = 5s
    timeout = ${?DASHBOARD_TIMEOUT}
    
    # Bridge registration
    registration {
      enabled = true
      interval = 30s
      retry_delay = 5s
      max_retries = 5
    }
    
    # Heartbeat settings
    heartbeat {
      enabled = true
      interval = 15s
      timeout = 5s
    }
  }

  # AI Core integration for AIC Protocol
  ai_core {
    # gRPC endpoint
    grpc_url = "auralink-ai-core:50051"
    grpc_url = ${?AI_CORE_GRPC_URL}
    
    # Request timeout for AI processing
    timeout = 2s
    timeout = ${?AI_CORE_TIMEOUT}
    
    # Enable compression pipeline
    enable_compression = true
    enable_compression = ${?AI_CORE_ENABLE_COMPRESSION}
    
    # Fallback to native codecs on error
    fallback_on_error = true
    
    # Compression quality presets
    compression {
      # Target bandwidth savings (30-50%)
      target_savings = 0.4
      
      # Quality level (1-10, higher is better)
      quality_level = 7
      
      # Enable region-of-interest detection
      roi_detection = true
      
      # Frame analysis sampling rate
      analysis_frame_rate = 5
    }
    
    # Circuit breaker settings
    circuit_breaker {
      enabled = true
      failure_threshold = 5
      timeout = 30s
      half_open_requests = 3
    }
  }

  # WebRTC Server integration (LiveKit-based)
  webrtc_server {
    # WebRTC Server API endpoint
    url = "http://auralink-webrtc:7880"
    url = ${?WEBRTC_SERVER_URL}
    
    # API authentication key
    api_key = ${?WEBRTC_API_KEY}
    
    # Room synchronization
    sync {
      enabled = true
      interval = 10s
      batch_size = 100
    }
    
    # Participant state sharing
    participant_sync {
      enabled = true
      realtime = true
    }
  }

  # Communication Service integration (Matrix-based)
  communication_service {
    url = "http://auralink-communication:8008"
    url = ${?COMMUNICATION_SERVICE_URL}
    
    api_key = ${?COMMUNICATION_API_KEY}
    
    # AuraID resolution
    auraid {
      enabled = true
      cache_ttl = 300s
      fallback_to_email = true
    }
  }

  # Database configuration (PostgreSQL)
  database {
    # JDBC connection URL
    url = "jdbc:postgresql://postgres:5432/auralink"
    url = ${?DATABASE_URL}
    
    # Credentials
    username = "auralink"
    username = ${?DB_USER}
    
    password = ${?DB_PASSWORD}
    
    # Connection pool settings
    pool {
      size = 20
      size = ${?DB_POOL_SIZE}
      
      max_lifetime = 1800000
      connection_timeout = 30000
      idle_timeout = 600000
      
      leak_detection_threshold = 60000
    }
    
    # Schema
    schema = "ingress_egress"
    
    # Auto-migration
    auto_migrate = true
    auto_migrate = ${?DB_AUTO_MIGRATE}
  }

  # Redis configuration for state synchronization
  redis {
    # Redis host
    host = "redis"
    host = ${?REDIS_HOST}
    
    # Redis port
    port = 6379
    port = ${?REDIS_PORT}
    
    # Authentication
    password = ${?REDIS_PASSWORD}
    
    # Database index
    database = 0
    database = ${?REDIS_DB}
    
    # Connection pool
    pool {
      max_total = 50
      max_idle = 20
      min_idle = 5
    }
    
    # Timeouts
    timeout = 2000
    
    # Key prefixes
    key_prefix = "auralink:ingress-egress:"
    
    # TTL for cached data
    cache_ttl = 300
  }

  # SIP Gateway configuration
  sip {
    enabled = ${auralink.features.enable_sip}
    
    # SIP server endpoint
    server_url = "sip:asterisk:5060"
    server_url = ${?SIP_SERVER_URL}
    
    # Transport protocol (UDP, TCP, TLS)
    transport = "UDP"
    transport = ${?SIP_TRANSPORT}
    
    # SIP trunk provider
    trunk_provider = "twilio"
    trunk_provider = ${?SIP_TRUNK_PROVIDER}
    
    # Trunk credentials
    trunk_credentials = ${?SIP_TRUNK_CREDENTIALS}
    
    # Codec preferences
    codecs = ["opus", "pcmu", "pcma", "g722"]
    
    # DTMF handling
    dtmf {
      mode = "rfc2833"
      payload_type = 101
    }
    
    # Call routing
    routing {
      default_region = "us"
      enable_e164_lookup = true
    }
  }

  # RTMP Bridge configuration
  rtmp {
    enabled = ${auralink.features.enable_rtmp}
    
    # RTMP ingest server port
    ingest_port = 1935
    ingest_port = ${?RTMP_INGEST_PORT}
    
    # Streaming destinations
    destinations = [
      {
        name = "youtube"
        url = "rtmp://a.rtmp.youtube.com/live2"
        enabled = true
      },
      {
        name = "twitch"
        url = "rtmp://live.twitch.tv/app"
        enabled = true
      },
      {
        name = "facebook"
        url = "rtmps://live-api-s.facebook.com:443/rtmp/"
        enabled = true
      }
    ]
    
    # Transcoding settings
    transcoding {
      video_codec = "h264"
      audio_codec = "aac"
      
      # Quality presets
      presets = {
        "1080p" = {
          width = 1920
          height = 1080
          bitrate = 6000
          framerate = 30
        }
        "720p" = {
          width = 1280
          height = 720
          bitrate = 3000
          framerate = 30
        }
        "480p" = {
          width = 854
          height = 480
          bitrate = 1500
          framerate = 30
        }
      }
    }
  }

  # Recording Service configuration
  recording {
    enabled = ${auralink.features.enable_recording}
    
    # Storage backend (s3, gcs, azure, local)
    storage_backend = "s3"
    storage_backend = ${?RECORDING_STORAGE_BACKEND}
    
    # S3 configuration
    s3 {
      bucket = ${?RECORDING_BUCKET}
      region = "us-west-2"
      region = ${?RECORDING_S3_REGION}
      access_key = ${?AWS_ACCESS_KEY_ID}
      secret_key = ${?AWS_SECRET_ACCESS_KEY}
      prefix = "recordings/"
    }
    
    # Recording formats
    formats = ["mp4", "webm"]
    
    # Quality settings
    quality {
      video_bitrate = 2500
      audio_bitrate = 128
      resolution = "1080p"
    }
    
    # Retention policy
    retention {
      enabled = true
      days = 90
    }
    
    # Automatic recording triggers
    auto_record {
      enabled = false
      on_participant_count = 2
    }
  }

  # Mesh routing configuration
  mesh {
    enabled = ${auralink.features.enable_mesh}
    
    # Mesh routing service endpoint
    routing_service_url = "http://auralink-mesh-routing:8090"
    routing_service_url = ${?MESH_ROUTING_URL}
    
    # Optimization settings
    optimization {
      enabled = true
      algorithm = "ai_latency"
      recompute_interval = 60s
    }
    
    # Peer discovery
    discovery {
      enabled = true
      interval = 30s
    }
  }

  # Trust system integration
  trust {
    enabled = ${auralink.features.enable_trust}
    
    # Trust service endpoint
    service_url = "http://auralink-communication:8008/api/trust"
    service_url = ${?TRUST_SERVICE_URL}
    
    # Reputation-based policies
    policies {
      # Minimum trust score for call initiation
      min_score_call = 50
      
      # Minimum trust score for recording
      min_score_record = 70
      
      # Rate limiting by trust level
      rate_limit {
        low_trust = 5      # calls per hour
        medium_trust = 20
        high_trust = 100
      }
    }
  }

  # Metrics and monitoring
  metrics {
    enabled = true
    enabled = ${?ENABLE_METRICS}
    
    # Prometheus exporter
    prometheus {
      enabled = true
      port = 9090
      port = ${?PROMETHEUS_PORT}
      path = "/metrics"
    }
    
    # Export interval
    export_interval = 15s
    
    # Custom metrics
    custom {
      # AIC compression efficiency
      aic_compression_ratio = true
      aic_latency = true
      
      # Bridge health
      bridge_status = true
      participant_count = true
      conference_count = true
      
      # Media quality
      packet_loss = true
      jitter = true
      rtt = true
      
      # External bridges
      sip_call_count = true
      rtmp_stream_count = true
      recording_count = true
    }
  }

  # Health checks
  health {
    # HTTP endpoint configuration
    http {
      enabled = true
      port = 8080
      port = ${?HEALTH_CHECK_PORT}
      
      # Endpoints
      liveness_path = "/health"
      readiness_path = "/ready"
    }
    
    # Dependency checks
    dependencies {
      postgres = true
      redis = true
      dashboard = true
      ai_core = ${auralink.features.enable_aic}
      webrtc_server = true
    }
    
    # Check intervals
    check_interval = 10s
    
    # Timeout for dependency checks
    dependency_timeout = 3s
  }

  # Security settings
  security {
    # JWT validation
    jwt {
      enabled = true
      secret = ${?JWT_SECRET}
      algorithm = "HS256"
      issuer = "auralink"
      audience = "auralink-services"
    }
    
    # API key authentication
    api_keys {
      enabled = true
      header_name = "X-AuraLink-API-Key"
    }
    
    # Rate limiting
    rate_limiting {
      enabled = true
      requests_per_minute = 100
      burst_size = 20
    }
    
    # CORS settings
    cors {
      enabled = true
      allowed_origins = ["*"]
      allowed_methods = ["GET", "POST", "PUT", "DELETE"]
    }
  }

  # Logging configuration
  logging {
    level = "INFO"
    level = ${?LOG_LEVEL}
    
    # Log format (json, text)
    format = "json"
    format = ${?LOG_FORMAT}
    
    # Structured logging fields
    structured {
      service = ${auralink.service.name}
      environment = ${auralink.service.environment}
      version = ${auralink.service.version}
    }
    
    # Audit logging
    audit {
      enabled = true
      log_file = "/var/log/auralink/audit.log"
    }
  }
}

# Jitsi Videobridge configuration overrides
videobridge {
  # Inherit AuraLink service identity
  instance-id = ${auralink.service.bridge_id}
  
  # HTTP server settings
  http-servers {
    public {
      port = 8080
      port = ${?JVB_HTTP_PORT}
    }
  }
  
  # RTP settings
  ice {
    udp {
      port = 10000
    }
  }
  
  # APIs
  apis {
    rest {
      enabled = true
    }
  }
  
  # Health checks (defer to AuraLink health endpoint)
  health {
    interval = ${auralink.health.check_interval}
  }
  
  # Stats (integrate with AuraLink metrics)
  stats {
    enabled = true
    interval = ${auralink.metrics.export_interval}
  }
}
